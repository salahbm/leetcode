# Longest Common Prefix in an Array of Strings

## Understanding `.reduce()` Method for Finding Shortest String Length

The given code snippet is used to determine the length of the shortest string in an array of strings (`strs`). Let’s break it down step by step:

### `.reduce()` Method

The `.reduce()` method iterates over an array and accumulates a single value based on a provided callback function.

### Breaking Down the Code

```typescript
const shortest = strs.reduce(
  (minLength, currentStr) => Math.min(minLength, currentStr.length),
  Infinity
);
```

1. **Initial Value (`Infinity`)**:

   - The second argument to `.reduce()` (`Infinity`) is the starting value (`minLength`). This ensures that any string length encountered will be smaller.

2. **Iterating Over Each String (`currentStr`)**:

   - For each string in `strs`, we compare its length (`currentStr.length`) with `minLength`.
   - `Math.min(minLength, currentStr.length)` ensures that `minLength` always holds the shortest length encountered so far.

3. **Final Result (`shortest`)**:
   - After all iterations, `shortest` holds the length of the shortest string in `strs`.

### Example Execution

```typescript
const strs = ['apple', 'app', 'apricot'];

const shortest = strs.reduce(
  (minLength, currentStr) => Math.min(minLength, currentStr.length),
  Infinity
);

console.log(shortest); // Output: 3
```

- **Iteration Steps**:
  - `"apple"` → `min(∞, 5)` → `5`
  - `"app"` → `min(5, 3)` → `3`
  - `"apricot"` → `min(3, 7)` → `3`

Thus, `shortest = 3`, which is the length of `"app"`.

### Why Use `Infinity`?

- If `strs` were empty (`[]`), `.reduce()` would return `Infinity`, avoiding unintended behavior.
- Any valid string length is always smaller than `Infinity`.

This approach efficiently finds the shortest string length in **O(n) time complexity**, where `n` is the number of strings in `strs`.

---

## Longest Common Prefix Algorithm

The solution employs a simple yet effective algorithm that involves iterating over each character position of the strings in the array and comparing them to find the longest common prefix.

### **Implementation Steps**

1. **Assumption of Initial Prefix**

   - Start by looking at the first string in the array (`strs[0]`) as the potential longest common prefix.

2. **Character-by-Character Comparison**

   - Iterate over the character indices of `strs[0]`, using `i` as the current index.
   - For each index `i`, compare the character across all strings (`strs[1:]`).

3. **Mismatch Detection**

   - If `i` exceeds the length of any string, it means we have reached the end of that string, stopping further comparisons.
   - If a character at index `i` in any string does not match the same index in `strs[0]`, the common prefix stops at this point.

4. **Return the Longest Common Prefix**
   - If a mismatch is found, return the substring `strs[0][0:i]`.
   - If the loop completes without mismatches, return `strs[0]`.

### **Performance Optimization**

- The early return mechanism improves efficiency by stopping as soon as a mismatch is found.
- No additional data structures are used, keeping space complexity minimal.
- The algorithm essentially scans characters column-wise, terminating as soon as discrepancies appear.

### **Example Walkthrough**

#### Given Strings:

```plaintext
["cardboard", "cart", "carrot", "carbon"]
```

#### Execution Steps:

1. **Initial Assumption:**

   - Assume `"cardboard"` is the longest common prefix candidate.

2. **Character Comparisons:**

   - Compare `'c'` from `"cardboard"` with all other strings: ✅ Match.
   - Compare `'a'` from `"cardboard"`: ✅ Match.
   - Compare `'r'` from `"cardboard"`: ✅ Match.
   - Compare `'d'` from `"cardboard"` with `'t'` from `"cart"`: ❌ Mismatch.

3. **Early Termination:**
   - A mismatch is found at index `3`.
   - The longest common prefix found is `"car"`.

### **Final Output:**

```typescript
console.log(longestCommonPrefix(['cardboard', 'cart', 'carrot', 'carbon'])); // Output: "car"
```

---

### **Time Complexity Analysis**

- **Worst-case Complexity:** `O(n * m)`, where:
  - `n` = number of strings.
  - `m` = length of the shortest string.
- This occurs when all characters match up to the shortest string.

### **Alternative Optimizations**

- **Binary Search:** Check mid-length prefixes and adjust accordingly.
- **Sorting Approach:** Sort the strings and compare only the first and last.
- **Trie Data Structure:** Efficient for handling a large dataset of words.

By implementing this approach, we ensure an optimal and efficient method to find the longest common prefix in a given set of strings.
